import os
import json
import re
import tempfile
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
import speech_recognition as sr
from pydub import AudioSegment
import subprocess
from dotenv import load_dotenv 
# ------------------- ููุงุชูุญ API -------------------
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# ------------------- ุชููุฆุฉ OpenAI -------------------
client = OpenAI(api_key=OPENAI_API_KEY)

# ------------------- ูุธุงู ุงูุจูุงูุงุช -------------------
class DataManager:
    def __init__(self):
        self.transactions = []
    
    def load_data(self, chat_id):
        try:
            with open(f'data_{chat_id}.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                if isinstance(data.get('transactions'), list):
                    self.transactions = data.get('transactions', [])
                else:
                    self.transactions = []
        except (FileNotFoundError, json.JSONDecodeError):
            self.transactions = []
    
    def save_data(self, chat_id):
        with open(f'data_{chat_id}.json', 'w', encoding='utf-8') as f:
            json.dump({'transactions': self.transactions}, f, ensure_ascii=False, indent=2)
    
    def get_commission_summary(self):
        total_commission = 0
        commission_details = []
        
        for trans in self.transactions:
            commission_amount = 0
            if 'ุงูุนูููุฉ' in trans and 'ุงููุจูุบ' in trans:
                if isinstance(trans['ุงูุนูููุฉ'], float):
                    commission_amount = trans['ุงููุจูุบ'] * trans['ุงูุนูููุฉ']
                elif isinstance(trans['ุงูุนูููุฉ'], (int, float)):
                    commission_amount = trans['ุงูุนูููุฉ']
                
            if commission_amount > 0:
                total_commission += commission_amount
                transaction_type = trans.get('ุงูููุน', 'ุบูุฑ ูุญุฏุฏ')
                item = trans.get('ุงููุงุฏุฉ', '')
                amount = trans.get('ุงููุจูุบ', 0)
                
                description = f"{transaction_type}"
                if transaction_type == 'ุตุฑู':
                    dollar_amount = trans.get('ูุจูุบ_ุงูุฏููุงุฑ', 0)
                    dollar_rate = trans.get('ุณุนุฑ_ุงูุฏููุงุฑ', 0)
                    description += f" {dollar_amount} ุฏููุงุฑ ุจุณุนุฑ {dollar_rate}"
                else:
                    description += f" {item} ุจูููุฉ {amount:,.0f}"
                
                commission_details.append({
                    'ุชุงุฑูุฎ': trans.get('ุงูุชุงุฑูุฎ', 'ุบูุฑ ูุญุฏุฏ'),
                    'ุนูููุฉ': commission_amount,
                    'ูู_ูุนุงููุฉ': description
                })
        
        return total_commission, commission_details
    
    def get_user_transactions(self, user_name, transaction_type):
        user_trans = []
        field = 'ุงูุจุงุฆุน' if transaction_type == 'ุจูุน' else 'ุงููุดุชุฑู'
        
        for trans in self.transactions:
            if trans.get(field) == user_name:
                if transaction_type == 'ุตุฑู' or trans.get('ุงูููุน') == transaction_type:
                    user_trans.append(trans)
        
        return user_trans
    
    def clear_transactions(self):
        self.transactions = []

data_manager = DataManager()

# ------------------- ุชุญููู ุงูุตูุช ุฅูู ูุต -------------------
async def transcribe_audio(audio_file_path):
    wav_path = None
    try:
        # ุชุญููู ุงูููู ูู OGG ุฅูู WAV
        wav_path = audio_file_path.replace('.ogg', '.wav')
        audio = AudioSegment.from_ogg(audio_file_path)
        audio = audio.set_channels(1)  # ุชุญููู ุฅูู ููุงุฉ ูุงุญุฏุฉ
        audio = audio.set_frame_rate(16000)  # ุชุนููู ูุนุฏู ุงูุนููุงุช
        audio.export(wav_path, format="wav")

        # ุงุณุชุฎุฏุงู Google Speech Recognition
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language='ar-AR')

        return text
    except Exception as e:
        return f"ุฎุทุฃ ูู ุชุญููู ุงูุตูุช ุฅูู ูุต: {str(e)}"
    finally:
        # ุชูุธูู ุงููููุงุช ุงููุคูุชุฉ
        try:
            if wav_path and os.path.exists(wav_path):
                os.remove(wav_path)
        except:
            pass

# ------------------- ูุนุงูุฌุฉ ุงููุตูุต ุจุงุณุชุฎุฏุงู GPT -------------------
async def analyze_with_gpt(text):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            response_format={"type": "json_object"},
            messages=[
                {
                    "role": "system",
                    "content": """
ุฃูุช ูุณุงุนุฏ ุฐูู ูุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงููุนุงููุงุช. 
ุงุณุชุฎุฑุฌ ุงููุนูููุงุช ุงูุชุงููุฉ ูู ุงููุต:
- ุงูููุน: "ุจูุน" ุฃู "ุดุฑุงุก" ุฃู "ุตุฑู"
- ุงูุจุงุฆุน: ุงุณู ุงูุจุงุฆุน
- ุงููุดุชุฑู: ุงุณู ุงููุดุชุฑู
- ุงููุงุฏุฉ: ุงููุงุฏุฉ ุงููุจุงุนุฉ/ุงููุดุชุฑุงุฉ (ููุท ูู ุญุงูุฉ ุงูุจูุน ูุงูุดุฑุงุก)
- ุงููุจูุบ: ุงูุฑูู ุงููุฐููุฑ ุจุนุฏ "ุจูููุฉ" ุฃู "ุจ" (ููุท ูู ุญุงูุฉ ุงูุจูุน ูุงูุดุฑุงุก)
- ูุจูุบ_ุงูุฏููุงุฑ: ุงูุฑูู ูุจู ูููุฉ "ุฏููุงุฑ" (ููุท ูู ุญุงูุฉ ุงูุตุฑู)
- ุณุนุฑ_ุงูุฏููุงุฑ: ุงูุฑูู ุจุนุฏ "ุณุนุฑ" ุฃู "ุจุณุนุฑ" (ููุท ูู ุญุงูุฉ ุงูุตุฑู)
- ุงูุนูููุฉ: ุงููุณุจุฉ ุงููุฆููุฉ ุจุนุฏ "ุนูููุฉ" ุฃู "ุจุนูููุฉ" ูุญููุฉ ุฅูู ุนุฏุฏ ุนุดุฑู (ูุซูุงู 5% ุชุตุจุญ 0.05)

ุฃุฌุจ ุจุชูุณูู JSON ููุท.

ุฃูุซูุฉ:
1. ูู ุญุงูุฉ ุงูุจูุน ุฃู ุงูุดุฑุงุก:
{
  "ุงูููุน": "ุจูุน",
  "ุงูุจุงุฆุน": "ุฃุญูุฏ",
  "ุงููุดุชุฑู": "ูุญูุฏ",
  "ุงููุงุฏุฉ": "ุฒูุช",
  "ุงููุจูุบ": 100000,
  "ุงูุนูููุฉ": 0.02
}

2. ูู ุญุงูุฉ ุงูุตุฑู:
{
  "ุงูููุน": "ุตุฑู",
  "ุงูุจุงุฆุน": "ุฃุญูุฏ",
  "ุงููุดุชุฑู": "ูุญูุฏ",
  "ูุจูุบ_ุงูุฏููุงุฑ": 100,
  "ุณุนุฑ_ุงูุฏููุงุฑ": 10000,
  "ุงูุนูููุฉ": 0.03
}
"""
                },
                {"role": "user", "content": text}
            ]
        )
        
        gpt_response = response.choices[0].message.content
        data = json.loads(gpt_response)
        
        # ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุทููุจุฉ ุญุณุจ ููุน ุงููุนุงููุฉ
        if data.get('ุงูููุน') == 'ุตุฑู':
            required = ['ุงูููุน', 'ุงูุจุงุฆุน', 'ุงููุดุชุฑู', 'ูุจูุบ_ุงูุฏููุงุฑ', 'ุณุนุฑ_ุงูุฏููุงุฑ']
        else:
            required = ['ุงูููุน', 'ุงูุจุงุฆุน', 'ุงููุดุชุฑู', 'ุงููุงุฏุฉ', 'ุงููุจูุบ']
        
        if any(field not in data for field in required):
            return None, "ุจูุงูุงุช ูุงูุตุฉ ูู ุงูุฑุฏ"
        
        return data, None
    except Exception as e:
        return None, f"ุฎุทุฃ: {str(e)}"

# ------------------- ูุนุงูุฌุงุช ุงูุจูุช -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""ูุฑุญุจุงู! ููููู:
1๏ธโฃ ุฅุฑุณุงู ูุนุงููุฉ ูุตูุฉ ูุซู:
   - ุจูุน: 'ุจูุน ูู ุฃุญูุฏ ุฅูู ูุญูุฏ ุฒูุช ุจ100000 ุจุนูููุฉ 2%'
   - ุดุฑุงุก: 'ุดุฑุงุก ูู ูุญูุฏ ุฅูู ุฃุญูุฏ ุฒูุช ุจ50000 ุจุนูููุฉ 3%'
   - ุตุฑู: 'ุตุฑู ุฃุญูุฏ ููุญูุฏ 100 ุฏููุงุฑ ุจุณุนุฑ 10000 ุจุนูููุฉ 3%'

2๏ธโฃ ุชุณุฌูู ุฑุณุงูุฉ ุตูุชูุฉ ุชุญุชูู ุนูู ููุณ ุงููุนูููุงุช

ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:
/records - ุนุฑุถ ุฌููุน ุงููุนุงููุงุช
/commission - ุนุฑุถ ุณุฌู ุงูุนูููุงุช
/user ุจูุน ุงุญูุฏ - ุนุฑุถ ูุนุงููุงุช ุงูุจูุน ูููุณุชุฎุฏู ุงุญูุฏ
/user ุดุฑุงุก ูุญูุฏ - ุนุฑุถ ูุนุงููุงุช ุงูุดุฑุงุก ูููุณุชุฎุฏู ูุญูุฏ
/user ุตุฑู ุงุญูุฏ - ุนุฑุถ ูุนุงููุงุช ุงูุตุฑู ูููุณุชุฎุฏู ุงุญูุฏ
/clear - ูุณุญ ุฌููุน ุงูุณุฌูุงุช""")

async def view_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    data_manager.load_data(chat_id)
    
    if not data_manager.transactions:
        await update.message.reply_text("ูุง ุชูุฌุฏ ูุนุงููุงุช ูุณุฌูุฉ")
        return
    
    response = "๐ ุณุฌู ุงููุนุงููุงุช:\n\n"
    for idx, trans in enumerate(data_manager.transactions, 1):
        transaction_type = trans.get('ุงูููุน', 'ุบูุฑ ูุญุฏุฏ')
        
        record = f"""ูุนุงููุฉ {idx}:
๐ {trans.get('ุงูุชุงุฑูุฎ', 'ุบูุฑ ูุญุฏุฏ')}
๐ธ {transaction_type}
๐ค ุงูุจุงุฆุน: {trans.get('ุงูุจุงุฆุน', 'ุบูุฑ ูุนุฑูู')}
๐ฅ ุงููุดุชุฑู: {trans.get('ุงููุดุชุฑู', 'ุบูุฑ ูุนุฑูู')}
"""
        
        if transaction_type == 'ุตุฑู':
            dollar_amount = trans.get('ูุจูุบ_ุงูุฏููุงุฑ', 0)
            dollar_rate = trans.get('ุณุนุฑ_ุงูุฏููุงุฑ', 0)
            total_amount = dollar_amount * dollar_rate
            commission_rate = trans.get('ุงูุนูููุฉ', 0)
            commission_amount = total_amount * commission_rate
            net_value = total_amount - commission_amount
            
            record += f"""๐ต ูุจูุบ ุงูุฏููุงุฑ: {dollar_amount:,.0f} $
๐น ุณุนุฑ ุงูุฏููุงุฑ: {dollar_rate:,.0f} ู.ุณ
๐ฐ ุงููุจูุบ ุงูููู: {total_amount:,.0f} ู.ุณ
๐ ุงูุนูููุฉ: {commission_rate*100:.1f}% ({commission_amount:,.0f} ู.ุณ)
๐ต ุงูุตุงูู: {net_value:,.0f} ู.ุณ"""
            
        else:  # ุจูุน ุฃู ุดุฑุงุก
            record += f"""๐ฆ {trans.get('ุงููุงุฏุฉ', 'ุบูุฑ ูุญุฏุฏ')}
๐ฐ ุงููุจูุบ: {trans.get('ุงููุจูุบ', 0):,.0f} ู.ุณ
๐ ุงูุนูููุฉ: {trans.get('ุงูุนูููุฉ', 0)*100:.1f}%
๐ต ุงูุตุงูู: {trans.get('ุงูุตุงูู', 0):,.0f} ู.ุณ"""
        
        record += "\nโโโโโโโโโโโโโโ\n"
        
        if len(response + record) > 4096:
            await update.message.reply_text(response)
            response = record
        else:
            response += record
    
    if response:
        await update.message.reply_text(response)

async def view_commission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    data_manager.load_data(chat_id)
    
    total_commission, commission_details = data_manager.get_commission_summary()
    
    if not commission_details:
        await update.message.reply_text("ูุง ุชูุฌุฏ ุนูููุงุช ูุณุฌูุฉ")
        return
    
    response = f"""๐ฐ ุณุฌู ุงูุนูููุงุช:
โโโโโโโโโโโโโโ
ุงููุฌููุน ุงูููู: {total_commission:,.0f} ู.ุณ
\nุชูุงุตูู ุงูุนูููุงุช:\n"""
    
    for detail in commission_details:
        response += f"""
๐ {detail['ุชุงุฑูุฎ']}
๐ต ุงูุนูููุฉ: {detail['ุนูููุฉ']:,.0f} ู.ุณ
๐ {detail['ูู_ูุนุงููุฉ']}
โโโโโโโโโโโโโโ"""
    
    await update.message.reply_text(response)

async def view_user_transactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 2:
            await update.message.reply_text("ุงูุฑุฌุงุก ุฅุฏุฎุงู ููุน ุงููุนุงููุฉ (ุจูุน/ุดุฑุงุก/ุตุฑู) ูุงุณู ุงููุณุชุฎุฏู")
            return
        
        transaction_type = args[0]
        user_name = ' '.join(args[1:])
        
        if transaction_type not in ['ุจูุน', 'ุดุฑุงุก', 'ุตุฑู']:
            await update.message.reply_text("ููุน ุงููุนุงููุฉ ูุฌุจ ุฃู ูููู 'ุจูุน' ุฃู 'ุดุฑุงุก' ุฃู 'ุตุฑู'")
            return
        
        chat_id = update.message.chat_id
        data_manager.load_data(chat_id)
        
        transactions = data_manager.get_user_transactions(user_name, transaction_type)
        
        if not transactions:
            await update.message.reply_text(f"ูุง ุชูุฌุฏ ูุนุงููุงุช {transaction_type} ูู {user_name}")
            return
        
        response = f"๐ ุณุฌู ูุนุงููุงุช {transaction_type} ูู {user_name}:\n\n"
        for trans in transactions:
            transaction_type = trans.get('ุงูููุน', 'ุบูุฑ ูุญุฏุฏ')
            record = f"""๐ {trans.get('ุงูุชุงุฑูุฎ', 'ุบูุฑ ูุญุฏุฏ')}\n"""
            
            if transaction_type == 'ุตุฑู':
                dollar_amount = trans.get('ูุจูุบ_ุงูุฏููุงุฑ', 0)
                dollar_rate = trans.get('ุณุนุฑ_ุงูุฏููุงุฑ', 0)
                total_amount = dollar_amount * dollar_rate
                
                record += f"""๐ต ูุจูุบ ุงูุฏููุงุฑ: {dollar_amount:,.0f} $
๐น ุณุนุฑ ุงูุฏููุงุฑ: {dollar_rate:,.0f} ู.ุณ
๐ฐ ุงููุจูุบ ุงูููู: {total_amount:,.0f} ู.ุณ"""
            else:
                record += f"""๐ฆ {trans.get('ุงููุงุฏุฉ', 'ุบูุฑ ูุญุฏุฏ')}
๐ฐ ุงููุจูุบ: {trans.get('ุงููุจูุบ', 0):,.0f} ู.ุณ"""
            
            record += f"\n๐ต ุงูุตุงูู: {trans.get('ุงูุตุงูู', 0):,.0f} ู.ุณ\nโโโโโโโโโโโโโโ"
            
            if len(response + record) > 4096:
                await update.message.reply_text(response)
                response = record
            else:
                response += record
        
        if response:
            await update.message.reply_text(response)
        
    except Exception as e:
        await update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ: {str(e)}")

async def clear_records(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    data_manager.load_data(chat_id)
    data_manager.clear_transactions()
    data_manager.save_data(chat_id)
    await update.message.reply_text("ุชู ูุณุญ ุฌููุน ุงูุณุฌูุงุช")

async def handle_voice_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    temp_file = None
    try:
        await update.message.reply_text("ุฌุงุฑู ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ...")
        voice = update.message.voice
        
        temp_file = tempfile.NamedTemporaryFile(suffix='.ogg', delete=False)
        temp_file.close()
        
        voice_file = await context.bot.get_file(voice.file_id)
        await voice_file.download_to_drive(temp_file.name)
        
        text = await transcribe_audio(temp_file.name)
        
        if text.startswith("ุฎุทุฃ"):
            await update.message.reply_text(text)
            return
            
        await update.message.reply_text(f"๐ค ุชู ุชุญููู ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ ุฅูู:\n{text}")
        await handle_message(update, context, text)
        
    except Exception as e:
        await update.message.reply_text(f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ: {str(e)}")
    finally:
        try:
            if temp_file and os.path.exists(temp_file.name):
                os.remove(temp_file.name)
        except:
            pass

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE, external_text=None):
    text = external_text if external_text else update.message.text
    if text.startswith('/'):
        return
    
    data, error = await analyze_with_gpt(text)
    if error:
        await update.message.reply_text(f"โ {error}")
        return
    
    transaction_type = data.get('ุงูููุน')
    
    if transaction_type not in ['ุจูุน', 'ุดุฑุงุก', 'ุตุฑู']:
        await update.message.reply_text("โ ููุน ุงููุนุงููุฉ ุบูุฑ ูุนุฑูู. ุงูุฃููุงุน ุงููุชุงุญุฉ: ุจูุนุ ุดุฑุงุกุ ุตุฑู")
        return
    
    commission_rate = data.get('ุงูุนูููุฉ', 0)
    
    # ุฅูุดุงุก ูุนุงููุฉ ุฌุฏูุฏุฉ
    new_transaction = {
        "ุงูุชุงุฑูุฎ": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "ุงูููุน": transaction_type,
        "ุงูุจุงุฆุน": data.get('ุงูุจุงุฆุน', 'ุบูุฑ ูุนุฑูู'),
        "ุงููุดุชุฑู": data.get('ุงููุดุชุฑู', 'ุบูุฑ ูุนุฑูู'),
        "ุงูุนูููุฉ": commission_rate
    }
    
    # ูุนุงูุฌุฉ ุญุณุจ ููุน ุงููุนุงููุฉ
    if transaction_type == 'ุตุฑู':
        if 'ูุจูุบ_ุงูุฏููุงุฑ' not in data or 'ุณุนุฑ_ุงูุฏููุงุฑ' not in data:
            await update.message.reply_text("โ ูุนูููุงุช ุบูุฑ ูุงููุฉ ููุนุงููุฉ ุงูุตุฑู")
            return
            
        dollar_amount = data['ูุจูุบ_ุงูุฏููุงุฑ']
        dollar_rate = data['ุณุนุฑ_ุงูุฏููุงุฑ']
        total_amount = dollar_amount * dollar_rate
        commission_amount = total_amount * commission_rate
        net_value = total_amount - commission_amount
        
        new_transaction.update({
            "ูุจูุบ_ุงูุฏููุงุฑ": dollar_amount,
            "ุณุนุฑ_ุงูุฏููุงุฑ": dollar_rate,
            "ุงููุจูุบ": total_amount,
            "ุงูุตุงูู": net_value
        })
        
        response = f"""
โ ุชู ุชุณุฌูู ูุนุงููุฉ ุตุฑู:
โโโโโโโโโโโโโโ
๐ ุงูุชุงุฑูุฎ: {new_transaction['ุงูุชุงุฑูุฎ']}
๐ค ุงูุจุงุฆุน: {new_transaction['ุงูุจุงุฆุน']}
๐ฅ ุงููุดุชุฑู: {new_transaction['ุงููุดุชุฑู']}
๐ต ูุจูุบ ุงูุฏููุงุฑ: {dollar_amount:,.0f} $
๐น ุณุนุฑ ุงูุฏููุงุฑ: {dollar_rate:,.0f} ู.ุณ
๐ฐ ุงููุจูุบ ุงูููู: {total_amount:,.0f} ู.ุณ
๐ ุงูุนูููุฉ: {commission_rate*100:.1f}% ({commission_amount:,.0f} ู.ุณ)
๐ต ุงูุตุงูู: {net_value:,.0f} ู.ุณ
"""
        
    else:  # ุจูุน ุฃู ุดุฑุงุก
        if 'ุงููุงุฏุฉ' not in data or 'ุงููุจูุบ' not in data:
            await update.message.reply_text("โ ูุนูููุงุช ุบูุฑ ูุงููุฉ ูููุนุงููุฉ")
            return
            
        amount = data['ุงููุจูุบ']
        commission_amount = amount * commission_rate
        net_value = amount - commission_amount
        
        new_transaction.update({
            "ุงููุงุฏุฉ": data['ุงููุงุฏุฉ'],
            "ุงููุจูุบ": amount,
            "ุงูุตุงูู": net_value
        })
        
        response = f"""
โ ุชู ุชุณุฌูู ูุนุงููุฉ {transaction_type}:
โโโโโโโโโโโโโโ
๐ ุงูุชุงุฑูุฎ: {new_transaction['ุงูุชุงุฑูุฎ']}
๐ค ุงูุจุงุฆุน: {new_transaction['ุงูุจุงุฆุน']}
๐ฅ ุงููุดุชุฑู: {new_transaction['ุงููุดุชุฑู']}
๐ฆ ุงููุงุฏุฉ: {data['ุงููุงุฏุฉ']}
๐ฐ ุงููุจูุบ: {amount:,.0f} ู.ุณ
๐ ุงูุนูููุฉ: {commission_rate*100:.1f}% ({commission_amount:,.0f} ู.ุณ)
๐ต ุงูุตุงูู: {net_value:,.0f} ู.ุณ
"""
    
    # ุญูุธ ุงููุนุงููุฉ
    data_manager.load_data(update.message.chat_id)
    data_manager.transactions.append(new_transaction)
    data_manager.save_data(update.message.chat_id)
    
    await update.message.reply_text(response)

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("records", view_records))
    app.add_handler(CommandHandler("commission", view_commission))
    app.add_handler(CommandHandler("user", view_user_transactions))
    app.add_handler(CommandHandler("clear", clear_records))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice_message))
    
    print("ุงูุจูุช ูุนูู...")
    app.run_polling()

if __name__ == "__main__":
    main()